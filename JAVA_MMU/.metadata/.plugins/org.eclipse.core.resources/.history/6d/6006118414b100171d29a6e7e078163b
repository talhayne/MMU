package com.hit.util;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.FileHandler;
import java.util.logging.Formatter;
import java.util.logging.Level;
import java.util.logging.LogRecord;


public class MMULogger {

	public final static String DEFAULT_FILE_NAME = "logs/log.txt";
	private static FileHandler handler;
	private static final MMULogger instance = new MMULogger(); 
	private int x = 1;
	
	private MMULogger() 
	{  
//			try {
//				handler = new FileHandler(DEFAULT_FILE_NAME);
//				handler.setFormatter(new OnlyMessageFormatter());
//			} catch (SecurityException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			} 
	}
	
	public static MMULogger getInstance(){
		return instance;
	}
	
	public void startNewLogFile() {
		try {
			if(handler != null) {
				handler.close();
			}
			handler = new FileHandler(DEFAULT_FILE_NAME);
			handler.setFormatter(new OnlyMessageFormatter());
		} catch (SecurityException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public synchronized void write(String command, Level level) {
		handler.publish(new LogRecord(level,command+System.lineSeparator()));
	}
	
	public synchronized void writeError(String errorMsg, Exception e, Level level) {
		String errorToLog = "ERROR" + System.lineSeparator() + errorMsg + System.lineSeparator() + e;
		handler.publish(new LogRecord(level,errorToLog+System.lineSeparator()));
	}

	public class OnlyMessageFormatter extends Formatter {
		public OnlyMessageFormatter() {
			super();
		}

		@Override
		public String format(final LogRecord record) {
			return record.getMessage();
		}
	}

	public String getFileName() {
		// TODO Auto-generated method stub
		return DEFAULT_FILE_NAME;
	}
}



///////for ask tomer ////
/*Path pathtxt = Paths.get("log.txt");
private MMULogger() {
	try {
		if (Files.exists(pathtxt))
		{
			Files.deleteIfExists(pathtxt);
		}
	}catch(IOException e) {
		System.err.println(|"Cannot Delete Logs" + e.getMessage());
		System.exit(0);
	}
}*/