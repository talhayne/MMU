package com.hit.memoryunits;

import java.util.Map;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

public class RAM {
	private Map<Long,Page<byte[]>> pages;
	private int initialCapacity;
	
	public RAM(int initialCapacity) {
		setInitialCapacity(initialCapacity);
		pages = new HashMap<Long, Page<byte[]>>(initialCapacity);
	}
	public Map<Long, Page<byte[]>> getPages() {
		return pages;
	}
	public void setPages(Map<Long, Page<byte[]>> pages) {
		this.pages = pages;
	}
	public int getInitialCapacity() {
		return initialCapacity;
	}
	public void setInitialCapacity(int initialCapacity) {
		this.initialCapacity = initialCapacity;
	}
	
	public void addPage(Page<byte[]> addPage) {
		if(addPage != null) {
			pages.put(addPage.getPageId(), addPage);
		}
	}
	
	public void addPages(Page<byte[]>[] addPages) {
		for(Page<byte[]> page : addPages) {
			this.addPage(page);
		}
	}
	
	public void removePage(Page<byte[]> removePage) {
		if(removePage != null) {
			pages.remove(removePage.getPageId());
		}
	}
	
	public void removePages(Page<byte[]>[] removePages) {
		for(Page<byte[]> page : removePages) {
			this.removePage(page);
		}
	}
	
	Page<byte[]> getPage(Long pageId) {
		return pages.get(pageId);
	}
	
	@SuppressWarnings("unchecked")
	public Page<byte[]>[] getPages(Long[] pageIds) {
		List<Page<byte[]>> pageResults = new LinkedList<Page<byte[]>>();
		
		for(Long pageId : pageIds) {
			pageResults.add(this.getPage(pageId));
		}
		
		return pageResults.toArray((Page<byte[]>[]) new Page<?>[pageIds.length]);
	}
	
	
}
