package com.hit.view;

import java.text.MessageFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Observable;
import java.util.Scanner;
import java.util.StringTokenizer;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Text;

public class MMUView extends Observable implements View {

	
	private static final String TITLE = "MMU Project";
	private static final String PFLABEL = "Page Fault Amount:";
	private static final String PRLABEL = "Page Replacement Amount:";
	private static final String PLAY = "Play";
	private static final String PLAYALL = "Play All";
	private static final String RESET = "Reset";
	private static final String PROCESSES = "Processes";
	private static final String ORDER = "Focused Order: ";
	private static final String RAM_CAPACITY = "RC";
	private static final String PROCESS = "GP:";
	private static final String PROCESS_NUMBER = "PN";
	private static final String PAGE_FAULT = "PF";
	private static final String PAGE_REPLACEMENT = "PR";
	private static final String SPACE_DELIMITER = " ";
	private static final int EMPTY_VALUE = 0;
	private final int WIDTH = 800;
	private final int HEIGHT = 600;

	private int processCounter = 0;
	private int ramCapacity = 0;
	private int pfCounter = 0;
	private int prCounter = 0;
	private int orderCounter = 0;

	private Map<Integer, Integer> pageReplacementMap;
	private Map<Integer, Integer> pageColumnMap;
	private Map<Integer, Boolean> ramMap;
	private List<String> orders;

	private Display display;
	private Shell shell;
	private Text pfCounterText;
	private Table ramTable;
	private Label pfCounterLabel;
	private Label orderLabel;
	private Text focusedOrderText;
	private Text prCounterText;
	private Text orderNumberText;
	private org.eclipse.swt.widgets.List processList;
	private Button playButton;
	private Button playAllButton;
	private Button resetButton;

	public MMUView() {
	}

	private void createTable() {
		ramTable = new Table(shell, SWT.BORDER | SWT.FULL_SELECTION);
		GridData gridRamTable = new GridData(SWT.FILL, SWT.TOP, true, false, 1, 1);
		ramTable.setLayoutData(gridRamTable);
		ramTable.setHeaderVisible(true);
		ramTable.setLinesVisible(true);

		for (int i = 0; i < ramCapacity; i++) {
			new TableColumn(ramTable, SWT.NONE);
			new TableItem(ramTable, SWT.NONE);
		}
	}

	private void createPageCounters() {
		Composite compositePageCounts = new Composite(shell, SWT.NONE);
		compositePageCounts.setLayout(new GridLayout(2, false));

		pfCounterLabel = new Label(compositePageCounts, SWT.NONE);
		pfCounterLabel.setText(PFLABEL);
		pfCounterText = new Text(compositePageCounts, SWT.BORDER);
		GridData pfGridData = new GridData(15, -1);
		pfCounterText.setLayoutData(pfGridData);
		pfCounterText.setBackground(display.getSystemColor(SWT.COLOR_WHITE));
		pfCounterText.setEditable(false);

		Label prCountlbl = new Label(compositePageCounts, SWT.NONE);
		prCountlbl.setText(PRLABEL);
		prCounterText = new Text(compositePageCounts, SWT.BORDER);
		GridData prGridData = new GridData(15, -1);
		prCounterText.setLayoutData(prGridData);
		prCounterText.setBackground(display.getSystemColor(SWT.COLOR_WHITE));
		prCounterText.setEditable(false);

		Label orderNumberlbl = new Label(compositePageCounts, SWT.NONE);
		orderNumberlbl.setText(ORDER_INDEX);
		orderNumberText = new Text(compositePageCounts, SWT.BORDER);
		GridData onGridData = new GridData(15, -1);
		orderNumberText.setLayoutData(onGridData);
		orderNumberText.setBackground(display.getSystemColor(SWT.COLOR_WHITE));
		orderNumberText.setEditable(false);
	}

	private void createButtons() {
		Composite compositeButtons = new Composite(shell, SWT.NONE);
		RowLayout rlButtons = new RowLayout(SWT.HORIZONTAL);
		rlButtons.spacing = 10;
		compositeButtons.setLayout(rlButtons);
		compositeButtons.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, true, 1, 1));
		playButton = new Button(compositeButtons, SWT.NONE);
		playButton.setText(PLAY);
		playButton.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				Thread thread = new Thread() {
					public void run() {
						display.asyncExec(new Runnable() {
							public void run() {
								play();
							}
						});
					}
				};
				thread.start();
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				widgetSelected(e);
			}

		});
		playAllButton = new Button(compositeButtons, SWT.NONE);
		playAllButton.setText(PLAYALL);
		playAllButton.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				Thread thread = new Thread() {
					public void run() {
						display.asyncExec(new Runnable() {
							public void run() {
								playAll();
							}
						});
					}
				};
				thread.start();
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				widgetSelected(e);
			}

		});

		resetButton = new Button(compositeButtons, SWT.NONE);
		resetButton.setText(RESET);
		resetButton.addSelectionListener(new SelectionListener() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				Thread thread = new Thread() {
					public void run() {
						display.asyncExec(new Runnable() {
							public void run() {
								initialize();
							}
						});
					}
				};
				thread.start();
			}

			@Override
			public void widgetDefaultSelected(SelectionEvent e) {
				widgetSelected(e);
			}

		});
	}

	private void createProcessesList() {
		Composite compositeProcesses = new Composite(shell, SWT.NONE);
		compositeProcesses.setLayout(new GridLayout(1, true));
		compositeProcesses.setLayoutData(new GridData(SWT.FILL, SWT.TOP, false, true, 1, 1));
		Label processesLabel = new Label(compositeProcesses, SWT.NONE);
		processesLabel.setText(PROCESSES);

		processList = new org.eclipse.swt.widgets.List(compositeProcesses, SWT.BORDER | SWT.MULTI);
		processList.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, true, 1, 1));

		String[] itemsList = new String[processCounter];
		for (int i = 0; i < processCounter; i++) {
			itemsList[i] = "Process " + i;
		}

		processList.setItems(itemsList);
	}

	private void initialize() {

		for (int i = 0; i < ramCapacity; i++) {
			ramTable.getColumn(i).setText(String.valueOf(EMPTY_VALUE));
			ramTable.getColumn(i).pack();
			for (int j = 0; j < ramCapacity; j++) {
				ramTable.getItem(i).setText(j, String.valueOf(EMPTY_VALUE));
			}
		}

		for (int i = 0; i < ramCapacity; i++) {
			ramTable.getColumn(i).pack();
		}

		pfCounter = 0;
		prCounter = 0;
		orderCounter = 0;

		updateCounter(pfCounterText, pfCounter);
		updateCounter(prCounterText, prCounter);
		updateCounter(orderNumberText, orderCounter);
		orderCounter = 2;
		focusedOrderText.setText("");
		playButton.setEnabled(true);
		playAllButton.setEnabled(true);
		pageReplacementMap = new HashMap<Integer, Integer>();
		pageColumnMap = new HashMap<Integer, Integer>();
		ramMap = new HashMap<Integer, Boolean>();

		for (int i = 0; i < ramCapacity; i++) {
			ramMap.put(i, true);
		}
	}

	private void createOrders() {
		Composite compositePageCounts = new Composite(shell, SWT.NONE);
		compositePageCounts.setLayout(new GridLayout(2, false));
		orderLabel = new Label(compositePageCounts, SWT.NONE);
		orderLabel.setText(ORDER);
		focusedOrderText = new Text(compositePageCounts, SWT.BORDER);
		GridData pfGridData = new GridData(300, -1);
		focusedOrderText.setLayoutData(pfGridData);
		focusedOrderText.setBackground(display.getSystemColor(SWT.COLOR_WHITE));
		focusedOrderText.setEditable(false);
	}

	private void updateCounter(Text text, int counter) {
		text.setText(String.valueOf(counter));
	}

	private void playAll() {
		while (orderCounter < orders.size()) {
			play();
		}
	}

	private void play() {
		String order = orders.get(orderCounter);
		updateCounter(orderNumberText, orderCounter);
		focusedOrderText.setText(order);
		Scanner scanner = new Scanner(order);
		scanner.useDelimiter(SPACE_DELIMITER);
		String orderName = scanner.next();
		if (orderName.equals(PAGE_FAULT)) {
			pageFaultHandler();
		} else if (orderName.equals(PAGE_REPLACEMENT)) {
			pageReplacementHandler(scanner);
		} else if (orderName.startsWith(PROCESS)) {
			orderName = scanner.next();
			int processNum = Character.getNumericValue(orderName.charAt(1));
			processHandler(scanner, processNum);
		}
		orderCounter++;
		updateButtons();
		scanner.close();
	}

	private void pageFaultHandler() {
		pfCounter++;
		updateCounter(pfCounterText, pfCounter);
	}

	private void pageReplacementHandler(Scanner scanner) {
		prCounter++;
		updateCounter(prCounterText, prCounter);
		scanner.next();
		int moveToHarddisk = scanner.nextInt();
		scanner.next();
		int moveToRam = scanner.nextInt();
		pageReplacementMap.put(moveToRam, moveToHarddisk);
	}

	private void processHandler(Scanner scanner, int processNum) {
		if (isProcessSelected(processNum)) {
			int pageId = scanner.nextInt();
			String str = scanner.nextLine();
			String[] arr = getArrayFromString(str);
			if (pageReplacementMap.containsKey(pageId)) {
				if (pageColumnMap.containsKey(pageReplacementMap.get(pageId))) {
					int column = pageColumnMap.get(pageReplacementMap.get(pageId));
					ramTable.getColumn(column).setText(String.valueOf(EMPTY_VALUE));
					for (int i = 0; i < ramCapacity; i++) {
						ramTable.getItem(i).setText(column, String.valueOf(EMPTY_VALUE));
					}
					pageColumnMap.remove(pageId);
					ramMap.put(column, true);
				}
				pageReplacementMap.remove(pageId);
			}
			int col = getColumnIndex(pageId);
			this.ramTable.getColumn(col).setText(String.valueOf(pageId));
			for (int i = 0; i < arr.length; i++) {
				this.ramTable.getItem(i).setText(col, arr[i]);
			}
			this.ramTable.getColumn(col).pack();
		}
	}

	private String[] getArrayFromString(String str) {
		str = str.substring(2, str.length() - 1);
		String[] arr = str.split(",");
		for (int i = 0; i < arr.length; i++) {
			arr[i] = arr[i].trim();
		}
		return arr;
	}

	private int getNumber(String str) {
		for (String order : orders) {
			StringTokenizer token = new StringTokenizer(order);
			while (token.hasMoreTokens()) {
				if (token.nextToken().equals(str)) {
					String number = token.nextToken();
					return Integer.parseInt(number);
				}
			}
		}
		return EMPTY_VALUE;
	}

	private boolean isProcessSelected(int processIndex) {
		int[] processes = processList.getSelectionIndices();
		for (int i = 0; i < processes.length; i++) {
			if (processes[i] == processIndex) {
				return true;
			}
		}
		return false;
	}

	private void updateButtons() {
		if (orderCounter == orders.size()) {
			playButton.setEnabled(false);
			playAllButton.setEnabled(false);
		}
	}

	private int getColumnIndex(int pageId) {
		int column = 0;
		if (pageColumnMap.containsKey(pageId)) {
			column = pageColumnMap.get(pageId);
		} else {
			for (int i = 0; i < ramCapacity; i++) {
				if (ramMap.get(i)) {
					column = i;
					ramMap.put(i, false);
					pageColumnMap.put(pageId, i);
					break;
				}
			}
		}
		return column;
	}

	@Override
	public void start() {
		//int ordersNumber = this.orders.size();
		this.processCounter = getNumber(PROCESS_NUMBER);
		this.ramCapacity = getNumber(RAM_CAPACITY);
		this.display = new Display();
		this.shell = new Shell(this.display);
		this.shell.setLayout(new GridLayout(2, false));
		this.shell.setSize(WIDTH, HEIGHT);
		this.shell.setText(MessageFormat.format(TITLE, ramCapacity));
		this.shell.setBackground(display.getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW));

		createTable();
		createPageCounters();
		createButtons();
		createProcessesList();
		createOrders();
		initialize();
		
		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
		display.dispose();
	}
	
	public void setLogList(List<String> orders) {
		this.orders = orders;
	}
}